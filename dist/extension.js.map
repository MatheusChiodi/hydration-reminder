{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\n\nlet typingStartTime: number | null = null;\nlet typingTimer: NodeJS.Timeout | null = null;\nlet idleTimer: NodeJS.Timeout | null = null;\nlet statusBarItem: vscode.StatusBarItem;\nlet isActive = true;\n\nconst STORAGE_KEY = 'hydrationAlertCount';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('\u2705 Hydration Reminder foi ativada.');\n  vscode.window.showInformationMessage(\n    '\uD83D\uDCA1 Hydration Reminder: Monitorando sua sa\u00FAde durante a codifica\u00E7\u00E3o!'\n  );\n\n  createStatusBar(context);\n\n  vscode.workspace.onDidChangeTextDocument(() => {\n    if (!isActive) {\n      return;\n    }\n\n    const now = Date.now();\n\n    if (typingStartTime === null) {\n      typingStartTime = now;\n      alertShown = false;\n      startTypingTimer(context);\n    }\n\n    resetIdleTimer(context);\n  });\n\n  const toggleCommand = vscode.commands.registerCommand(\n    'hydrationReminder.toggle',\n    () => {\n      isActive = !isActive;\n      statusBarItem.text = isActive\n        ? '\uD83D\uDCA7 Hydration Reminder: Ativo'\n        : '\uD83D\uDCA4 Hydration Reminder: Inativo';\n      vscode.window.showInformationMessage(\n        `Hydration Reminder ${isActive ? 'ativado' : 'desativado'}`\n      );\n    }\n  );\n\n  context.subscriptions.push(toggleCommand);\n}\n\nfunction createStatusBar(context: vscode.ExtensionContext) {\n  statusBarItem = vscode.window.createStatusBarItem(\n    vscode.StatusBarAlignment.Left\n  );\n  statusBarItem.text = '\uD83D\uDCA7 Hydration Reminder: Ativo';\n  statusBarItem.tooltip = 'Clique para ativar/desativar os lembretes';\n  statusBarItem.command = 'hydrationReminder.toggle';\n  statusBarItem.show();\n  context.subscriptions.push(statusBarItem);\n}\n\nfunction getAlertTime(): number {\n  const config = vscode.workspace.getConfiguration('hydradev');\n  return 1000 * 60 * config.get('alertTimeInMinutes', 60);\n}\n\nfunction getIdleTime(): number {\n  const config = vscode.workspace.getConfiguration('hydradev');\n  return 1000 * 60 * config.get('idleResetTime', 10);\n}\n\nlet alertShown = false;\n\nfunction startTypingTimer(context: vscode.ExtensionContext) {\n  if (typingTimer) {\n    return;\n  }\n\n  typingTimer = setInterval(() => {\n    const now = Date.now();\n\n    if (\n      typingStartTime &&\n      !alertShown &&\n      now - typingStartTime >= getAlertTime()\n    ) {\n      showHydrationAlert(context);\n      alertShown = true;\n    }\n  }, 1000 * 30);\n}\n\nfunction resetIdleTimer(context: vscode.ExtensionContext) {\n  if (idleTimer) {\n    clearTimeout(idleTimer);\n  }\n\n  idleTimer = setTimeout(() => {\n    if (typingTimer) {\n      clearInterval(typingTimer);\n      typingTimer = null;\n    }\n\n    typingStartTime = null;\n    alertShown = false;\n    console.log('\u23F8\uFE0F Inatividade detectada. Temporizador reiniciado.');\n  }, getIdleTime());\n}\n\nfunction showHydrationAlert(context: vscode.ExtensionContext) {\n  const message = [\n    '\uD83D\uDCA7 *Hora da pausa!*',\n    'Voc\u00EA est\u00E1 codando h\u00E1 bastante tempo sem pausa.',\n  ].join('\\n');\n\n  vscode.window\n    .showInformationMessage(message, 'J\u00E1 fiz \u2705', 'Me lembra depois \u23F3')\n    .then((selection) => {\n      if (selection === 'J\u00E1 fiz \u2705') {\n        vscode.window.showInformationMessage(\n          '\uD83D\uDE80 Boa! Continue codando com sa\u00FAde.'\n        );\n        incrementAlertCount(context);\n      } else if (selection === 'Me lembra depois \u23F3') {\n        vscode.window.showInformationMessage(\n          '\u23F3 Sem problemas, te aviso novamente mais tarde.'\n        );\n      }\n    });\n}\n\nfunction incrementAlertCount(context: vscode.ExtensionContext) {\n  const current = context.globalState.get<number>(STORAGE_KEY, 0);\n  context.globalState.update(STORAGE_KEY, current + 1);\n}\n\nfunction showDailySummary(context: vscode.ExtensionContext) {\n  const total = context.globalState.get<number>(STORAGE_KEY, 0);\n  vscode.window.showInformationMessage(\n    `\uD83D\uDCCA Hoje voc\u00EA recebeu ${total} lembrete(s) de hidrata\u00E7\u00E3o. Continue se cuidando!`\n  );\n}\n\nexport function deactivate() {\n  if (typingTimer) {\n    clearInterval(typingTimer);\n  }\n  if (idleTimer) {\n    clearTimeout(idleTimer);\n  }\n  showDailySummary(\n    vscode.extensions.getExtension('hydradev.hydration-reminder')!.exports\n      .context\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
